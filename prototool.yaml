# Paths to exclude when searching for Protobuf files.
excludes:
  - ./third_party
  - ./tmp
  - ./vendor

# Protoc directives.
protoc:
  # The Protobuf version to use from https://github.com/protocolbuffers/protobuf/releases.
  # By default use 3.6.1.
  # You probably want to set this to make your builds completely reproducible.
  version: 3.12.1

  # Additional paths to include with -I to protoc.
  # By default, the directory of the config file is included,
  # or the current directory if there is no config file.
  includes:
    - ./third_party


  # If not set, compile will fail if there are unused imports.
  # Setting this will ignore unused imports.
  #allow_unused_imports: true

# Create directives.
#create:
  # List of mappings from relative directory to base package.
  # This affects how packages are generated with create.
  #packages:
    # This means that a file created "foo.proto" in the current directory will have package "bar".
    # A file created "a/b/foo.proto" will have package "bar.a.b".
    #- directory: .
    #  name: bar
    # This means that a file created "idl/code.uber/a/b/c.proto" will have package "uber.a.b".
    #- directory: idl/code.uber
    #  name: uber

# Lint directives.
#lint:
  # Linter files to ignore.
#  ignores:
#    - id: RPC_NAMES_CAMEL_CASE
#      files:
#        - path/to/foo.proto
#        - path/to/bar.proto
#    - id: SYNTAX_PROTO3
#      files:
#        - path/to/foo.proto

  # Linter rules.
  # Run prototool list-all-linters to see all available linters.
#  rules:
    # Determines whether or not to include the default set of linters.
#    no_default: true

    # The specific linters to add.
#    add:
#      - ENUM_NAMES_CAMEL_CASE
#      - ENUM_NAMES_CAPITALIZED

    # The specific linters to remove.
#    remove:
#      - ENUM_NAMES_CAMEL_CASE

# Code generation directives.
generate:
  # Options that will apply to all plugins of type go and gogo.
  go_options:
    # The base import path. This should be the go path of the prototool.yaml file.
    # This is required if you have any go plugins.
    import_path: elbix.dev/engine

    # Extra modifiers to include with Mfile=package.
#    extra_modifiers:
#      google/api/annotations.proto: google.golang.org/genproto/googleapis/api/annotations
#      google/api/http.proto: google.golang.org/genproto/googleapis/api/annotations

  # The list of plugins.
  plugins:
      # The plugin name. This will go to protoc with --name_out, so it either needs
      # to be a built-in name (like java), or a plugin name with a binary
      # protoc-gen-name.
    - name: gogo

      # The type, if any. Valid types are go, gogo.
      # Use go if your plugin is a standard Golang plugin
      # that uses github.com/golang/protobuf imports, use gogo
      # if it uses github.com/gogo/protobuf imports. For protoc-gen-go
      # use go, For protoc-gen-gogo, protoc-gen-gogoslick, etc, use gogo.
      type: gogo

      # Extra flags to specify.
      # The only flag you will generally set is plugins=grpc for Golang.
      # The Mfile=package flags are automatically set.
      # ** Otherwise, generally do not set this unless you know what you are doing. **
      flags: plugins=grpc

      # The path to output generated files to.
      # If the directory does not exist, it will be created when running generation.
      # This needs to be a relative path.
      output: .

      # Optional override for the plugin path. For example, if you set set path to
      # /usr/local/bin/gogo_plugin", prototool will add the
      # "--plugin=protoc-gen-gogo=/usr/local/bin/gogo_plugin" flag to protoc calls.
#      path: /usr/local/bin/gogo

#    - name: yarpc-go
#      type: gogo
#      output: ../../.gen/proto/go

    - name: grpc-gateway
      type: gogo
      output: .

    - name: swagger
      type: gogo
      output: .

    - name: grpchan
      output: .

    - name: wrapper
      type: gogo
      output: .

    - name: model
      type: gogo
      output: .
