// Code generated by go-bindata. DO NOT EDIT.
// sources:
// postgres/20170727210828_users.sql

package migrations


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataPostgres20170727210828userssql = "" +
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4f\x6f\x9b\x4e\x10\x3d\x7b\x3f\xc5\x1c\x22\x61\xeb\x47\x9c\x5f" +
	"\xd3\xb4\x17\x5f\x4a\x01\xd5\x56\x09\x76\xf8\x13\xc9\x27\x34\xf6\x4e\xcd\xc4\xb0\x10\x76\x31\x71\x3e\x7d\x85\xf3" +
	"\x8f\x43\x52\xb5\xa7\xd1\xbc\xf7\x66\xb5\xf3\xe6\x89\xf3\x73\xf8\xaf\xe4\x5d\x83\x86\x20\xad\xfb\x36\xbe\x09\x80" +
	"\x15\x68\xda\x1a\xae\x14\x58\x69\x6d\x01\x6b\xa0\x07\xda\xb6\x86\x24\x74\x39\x29\x30\x39\x6b\x78\x9a\xeb\x45\xac" +
	"\x01\xeb\xba\x60\x92\x42\x08\x37\xf2\x9d\xc4\x87\xd8\x9d\xfb\xd7\x0e\x20\xe2\xec\x15\x4b\x9c\xef\x81\xdf\x43\xd3" +
	"\x56\x53\xa3\x61\x2c\x46\x2c\xa1\x6d\x59\x42\xb8\x4c\x20\x4c\x83\xc0\x16\x23\x2a\x91\x0b\x38\x60\xb3\xcd\xb1\x19" +
	"\x12\x92\x75\x5d\xe0\x31\x53\x58\xd2\x7b\x7c\x8d\x5a\x77\x55\x23\xdf\xe3\xb4\x41\xd3\x6a\xd0\x25\x16\x05\x2b\x33" +
	"\xa4\xb6\x0d\xa1\x21\x99\xa1\x01\xc3\x25\x69\x83\x65\x0d\x1d\x9b\xfc\xd4\xc2\x63\xa5\x68\x28\x6f\x6b\xf9\x2f\xf2" +
	"\x02\xb5\xc9\x8a\x6a\xc7\xea\x43\x79\xff\x87\x1c\xd5\x8e\xb2\x7e\x83\x3f\x3d\x6c\x8b\x91\xbb\x0c\xe3\x24\x72\x16" +
	"\x61\xd2\x1b\x99\x9d\x8c\xcc\x58\x66\x75\xc3\x25\x36\x47\x58\x45\x8b\x6b\x27\x5a\xc3\x4f\x7f\x0d\x63\x96\x93\x8f" +
	"\x46\x4e\x2e\x67\xad\xe2\xfb\x96\x20\x0d\x17\x37\xa9\x0f\xe3\x13\x38\x11\x93\x99\x10\x8b\x30\xf6\xa3\x04\x16\x61" +
	"\xb2\x1c\x5e\x8c\xa5\x0d\x27\x95\x0d\xc3\x73\xd8\xf0\x62\xbe\x0d\x4f\x56\xdb\xf0\xe6\xab\x0d\x6f\xa6\x4d\xe0\xd6" +
	"\x09\x52\x3f\x16\xa3\x71\x7f\xf8\x6c\x47\x8a\xfa\xf8\x65\x87\xab\xf1\xc4\x06\xab\xa9\x2a\xf3\x8d\x8a\x0d\x3f\x4c" +
	"\x25\x1d\xac\x67\xa4\xaf\x67\x97\x78\xf6\xff\xd7\xb3\x3b\xcf\x39\x7e\xf9\x74\x15\x53\xf9\xa3\x73\xe7\xb9\x37\x9d" +
	"\xee\x7f\x49\x92\xdd\x05\x6f\xdc\xcf\x8f\xc7\xbb\xe9\xfe\x7e\x65\xdc\xf9\xb2\x72\xba\xdb\xf5\xdc\xbd\x88\x0a\x2f" +
	"\x40\xcb\x86\x4b\x1b\x2c\x55\x75\xd6\x73\xe9\x77\x1c\xa6\xdf\xab\x3a\xf5\x92\xff\xd7\xf0\xf7\xe0\x5f\xc5\xbf\xa9" +
	"\x8a\x82\x24\x6c\x70\xbb\x17\xc2\x8b\x96\xab\x41\xfe\xc1\x75\x62\xd7\xf1\x7c\x98\x89\xdf\x01\x00\x00\xff\xff\x80" +
	"\xac\xb1\x43\x70\x03\x00\x00"

func bindataPostgres20170727210828userssqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPostgres20170727210828userssql,
		"postgres/20170727210828_users.sql",
	)
}



func bindataPostgres20170727210828userssql() (*asset, error) {
	bytes, err := bindataPostgres20170727210828userssqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "postgres/20170727210828_users.sql",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"postgres/20170727210828_users.sql": bindataPostgres20170727210828userssql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"postgres": {Func: nil, Children: map[string]*bintree{
		"20170727210828_users.sql": {Func: bindataPostgres20170727210828userssql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
